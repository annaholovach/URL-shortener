name: CI/CD Pipeline for Node.js App

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "/home/ubuntu/URL-shortener"

      - name: Create private key for SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private-key.pem
          chmod 600 private-key.pem

      - name: Create .env file on EC2
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          scp -i private-key.pem -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/URL-shortener/.env

      - name: Restart application using PM2
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cd /home/ubuntu/URL-shortener && pm2 restart url-shortener"

  verify_deploy:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy 

    steps:
    - name: Verify Deployment
      uses: peterkimzz/aws-ssm-send-command@master
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        instance-ids: ${{ secrets.EC2_INSTANCE_ID }}
        commands: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health)
          if [ "$STATUS" -eq 200 ]; then
            echo "Deployment successful"
          else
            echo "Deployment failed"
            exit 1
          fi

