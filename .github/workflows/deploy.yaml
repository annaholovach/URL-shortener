name: CI build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  checkout_code:
    name: Checkout Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Upload code as artifact
      uses: actions/upload-artifact@v3
      with:
        name: repository-files
        path: . 

  deploy_docker:
    name: Deploy to Docker on EC2
    runs-on: ubuntu-latest
    needs: checkout_code  

    steps:
    - name: Download repository files
      uses: actions/download-artifact@v3
      with:
        name: repository-files

    - name: Create .env file
      run: |
        echo "PORT=5000" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=3306" >> .env
        echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
        echo "REDIS_HOST=redis" >> .env
        echo "REDIS_PORT=6379" >> .env

    - name: Build Docker image
      run: |
        IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
        docker build --no-cache -t test:$IMAGE_TAG -f ./Dockerfile .

    - name: Save Docker image
      run: |
        IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
        docker save test:$IMAGE_TAG | gzip > test_$IMAGE_TAG.tar.gz

    - name: Upload Docker image to S3
      run: |
        IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
        aws s3 cp test.tar.gz s3://$S3_BUCKET/test.tar.gz
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}

    - name: Copy .env file to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: ".env"
        target: "~/app/.env"

    - name: Send command via SSM
      uses: peterkimzz/aws-ssm-send-command@master
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        instance-ids: ${{ secrets.EC2_INSTANCE_ID }}
        document-name: "AWS-RunShellScript"
        commands: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          aws s3 cp s3://$S3_BUCKET/test_$IMAGE_TAG.tar.gz ~/test_$IMAGE_TAG.tar.gz
          docker stop test || true
          docker rm test || true
          docker rmi test:$IMAGE_TAG || true
          docker load < ~/test_$IMAGE_TAG.tar.gz
          docker run -d --name test --env-file ~/app/.env -p 5000:5000 test:$IMAGE_TAG

  verify_deploy:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy_docker 

    steps:
    - name: Verify Deployment
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health)
          if [ "$STATUS" -eq 200 ]; then
            echo "Deployment successful"
          else
            echo "Deployment failed"
            exit 1
          fi

